#lang racket
(provide (all-defined-out))
(require "ast.rkt" "types.rkt" "syntax.rkt" a86/ast)

;; Registers used
(define rax 'rax)
(define rsp 'rsp)
(define rdi 'rdi)
(define rbx 'rbx)
(define rdx 'rdx)

;; Expr -> Asm
(define (compile e)

     (prog (Global 'entry)
           (Default 'rel)
           (Section '.text)
           (Extern 'str_to_symbol)
           (Label 'entry)
           (Mov rbx rdi) ; recv heap pointer
           (compile-e e)
           (Mov rdx rbx) ; return heap pointer in second return register           
           (Ret)
   
           (Label 'raise_error_align)
           (Sub rsp 8)
           )
  )

;; Expr -> Asm
(define (compile-e e)
  (begin
    (get-type e)
    
  (match e
    [(Int i)       (compile-value i)]
    [(Bool b)      (compile-value b)]
    [(Prim1 p e)   (compile-prim1 p e)]
    [(If e1 e2 e3) (compile-if e1 e2 e3)]))
    
  )


;; Value -> Asm
(define (compile-value v)
  (seq (Mov rax (imm->bits v))))

;; Op1 Expr -> Asm
(define (compile-prim1 p e)
  (seq (compile-e e)
       (compile-op1 p)))

;; Op1 -> Asm
(define (compile-op1 p)
  (match p
    ['add1 (Add rax (imm->bits 1))]
    ['sub1 (Sub rax (imm->bits 1))]
    ['zero?
     (let ((l1 (gensym)))
       (seq (Cmp rax 0)
            (Mov rax val-true)
            (Je l1)
            (Mov rax val-false)
            (Label l1)))]
   ))

;; Expr Expr Expr -> Asm
(define (compile-if e1 e2 e3)
  (let ((l1 (gensym 'if))
        (l2 (gensym 'if)))
    (seq (compile-e e1)
         (Cmp rax val-false)
         (Je l1)
         (compile-e e2)
         (Jmp l2)
         (Label l1)
         (compile-e e3)
         (Label l2))))

;; Expr Expr -> Asm
(define (compile-begin e1 e2)
  (seq (compile-e e1)
       (compile-e e2)))
